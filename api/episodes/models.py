""" Define table models for episode table and episode instances """
from engine.db import Base
from sqlalchemy import Column, Integer, MetaData, Table, Text


class Episode(Base):
    """ episodes table inherits from declarative base to define columns """
    metadata = MetaData()

    __tablename__ = 'episodes'
    id = Column(Integer, primary_key=True)
    alizarin_crimson = Column(Integer)
    aurora_borealis = Column(Integer)
    barn = Column(Integer)
    beach = Column(Integer)
    Column('black_gesso', Integer)
    Column('boat', Integer)
    Column('bridge', Integer)
    Column('bright_red', Integer)
    Column('building', Integer)
    Column('burnt_umber', Integer)
    Column('bushes', Integer)
    Column('cabin', Integer)
    Column('cactus', Integer)
    Column('cadmium_yellow', Integer)
    Column('cirrus', Integer)
    Column('cliff', Integer)
    Column('clouds', Integer)
    Column('color_hex', Text)
    Column('colors', Text)
    Column('conifer', Integer)
    Column('cumulus', Integer)
    Column('dark_sienna', Integer)
    Column('deciduous', Integer)
    Column('diane_andre', Integer)
    Column('dock', Integer)
    Column('episode', Text)
    Column('farm', Integer)
    Column('fence', Integer)
    Column('fire', Integer)
    Column('flowers', Integer)
    Column('fog', Integer)
    Column('grass', Integer)
    Column('guest', Integer)
    Column('hills', Integer)
    Column('img_src', Text)
    Column('indian_red', Integer)
    Column('indian_yellow', Integer)
    Column('lake', Integer)
    Column('lakes', Integer)
    Column('lighthouse', Integer)
    Column('liquid_black', Integer)
    Column('liquid_clear', Integer)
    Column('midnight_black', Integer)
    Column('mill', Integer)
    Column('moon', Integer)
    Column('mountain', Integer)
    Column('mountains', Integer)
    Column('night', Integer)
    Column('num_colors', Integer)
    Column('ocean', Integer)
    Column('painting_index', Integer)
    Column('painting_title', Text)
    Column('palm_trees', Integer)
    Column('path', Integer)
    Column('person', Integer)
    Column('phthalo_blue', Integer)
    Column('phthalo_green', Integer)
    Column('portrait', Integer)
    Column('prussian_blue', Integer)
    Column('river', Integer)
    Column('rocks', Integer)
    Column('sap_green', Integer)
    Column('season', Integer)
    Column('snow', Integer)
    Column('snowy_mountain', Integer)
    Column('steve_ross', Integer)
    Column('structure', Integer)
    Column('sun', Integer)
    Column('titanium_white', Integer)
    Column('title_x', Text)
    Column('tree', Integer)
    Column('trees', Integer)
    Column('van_dyke_brown', Integer)
    Column('waterfall', Integer)
    Column('waves', Integer)
    Column('windmill', Integer)
    Column('winter', Integer)
    Column('yellow_ochre', Integer)
    Column('youtube_src', Text)
    Column('title_y', Text)
    Column('date', Text)


    def __repr__(self):
        """ Return string representation of object """
        return f'<Episode {self.title}>'